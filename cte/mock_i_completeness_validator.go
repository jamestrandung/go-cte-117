// Code generated by mockery v2.14.0. DO NOT EDIT.

package cte

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// mockICompletenessValidator is an autogenerated mock type for the iCompletenessValidator type
type mockICompletenessValidator struct {
	mock.Mock
}

// doValidate provides a mock function with given fields: planName, cs, curPlanValue
func (_m *mockICompletenessValidator) doValidate(planName string, cs componentStack, curPlanValue reflect.Value) error {
	ret := _m.Called(planName, cs, curPlanValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, componentStack, reflect.Value) error); ok {
		r0 = rf(planName, cs, curPlanValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// isInterfaceSatisfied provides a mock function with given fields: expectedInterface
func (_m *mockICompletenessValidator) isInterfaceSatisfied(expectedInterface reflect.Type) error {
	ret := _m.Called(expectedInterface)

	var r0 error
	if rf, ok := ret.Get(0).(func(reflect.Type) error); ok {
		r0 = rf(expectedInterface)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// verifyComponentCompleteness provides a mock function with given fields: pm, cs, componentID, planType
func (_m *mockICompletenessValidator) verifyComponentCompleteness(pm parsedMetadata, cs componentStack, componentID string, planType string) error {
	ret := _m.Called(pm, cs, componentID, planType)

	var r0 error
	if rf, ok := ret.Get(0).(func(parsedMetadata, componentStack, string, string) error); ok {
		r0 = rf(pm, cs, componentID, planType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockICompletenessValidator interface {
	mock.TestingT
	Cleanup(func())
}

// newMockICompletenessValidator creates a new instance of mockICompletenessValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockICompletenessValidator(t mockConstructorTestingTnewMockICompletenessValidator) *mockICompletenessValidator {
	mock := &mockICompletenessValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
