// Code generated by mockery v2.14.0. DO NOT EDIT.

package cte

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// mockIStructDisassembler is an autogenerated mock type for the iStructDisassembler type
type mockIStructDisassembler struct {
	mock.Mock
}

// addAvailableMethod provides a mock function with given fields: rootPlanName, cs, m
func (_m *mockIStructDisassembler) addAvailableMethod(rootPlanName string, cs componentStack, m method) {
	_m.Called(rootPlanName, cs, m)
}

// extractAvailableMethods provides a mock function with given fields: t
func (_m *mockIStructDisassembler) extractAvailableMethods(t reflect.Type) []method {
	ret := _m.Called(t)

	var r0 []method
	if rf, ok := ret.Get(0).(func(reflect.Type) []method); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]method)
		}
	}

	return r0
}

// extractChildMethods provides a mock function with given fields: t, rootPlanName, cs
func (_m *mockIStructDisassembler) extractChildMethods(t reflect.Type, rootPlanName string, cs componentStack) []method {
	ret := _m.Called(t, rootPlanName, cs)

	var r0 []method
	if rf, ok := ret.Get(0).(func(reflect.Type, string, componentStack) []method); ok {
		r0 = rf(t, rootPlanName, cs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]method)
		}
	}

	return r0
}

// extractOwnMethods provides a mock function with given fields: t, rootPlanName, cs, hoistedMethods
func (_m *mockIStructDisassembler) extractOwnMethods(t reflect.Type, rootPlanName string, cs componentStack, hoistedMethods []method) []method {
	ret := _m.Called(t, rootPlanName, cs, hoistedMethods)

	var r0 []method
	if rf, ok := ret.Get(0).(func(reflect.Type, string, componentStack, []method) []method); ok {
		r0 = rf(t, rootPlanName, cs, hoistedMethods)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]method)
		}
	}

	return r0
}

// findMethodLocations provides a mock function with given fields: ms, rootPlanName
func (_m *mockIStructDisassembler) findMethodLocations(ms methodSet, rootPlanName string) []string {
	ret := _m.Called(ms, rootPlanName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(methodSet, string) []string); ok {
		r0 = rf(ms, rootPlanName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// isAvailableMoreThanOnce provides a mock function with given fields: m
func (_m *mockIStructDisassembler) isAvailableMoreThanOnce(m method) bool {
	ret := _m.Called(m)

	var r0 bool
	if rf, ok := ret.Get(0).(func(method) bool); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// performMethodExtraction provides a mock function with given fields: t, rootPlanName, cs
func (_m *mockIStructDisassembler) performMethodExtraction(t reflect.Type, rootPlanName string, cs componentStack) []method {
	ret := _m.Called(t, rootPlanName, cs)

	var r0 []method
	if rf, ok := ret.Get(0).(func(reflect.Type, string, componentStack) []method); ok {
		r0 = rf(t, rootPlanName, cs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]method)
		}
	}

	return r0
}

type mockConstructorTestingTnewMockIStructDisassembler interface {
	mock.TestingT
	Cleanup(func())
}

// newMockIStructDisassembler creates a new instance of mockIStructDisassembler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIStructDisassembler(t mockConstructorTestingTnewMockIStructDisassembler) *mockIStructDisassembler {
	mock := &mockIStructDisassembler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
