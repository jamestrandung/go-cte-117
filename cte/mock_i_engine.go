// Code generated by mockery v2.14.0. DO NOT EDIT.

package cte

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// mockIEngine is an autogenerated mock type for the iEngine type
type mockIEngine struct {
	mock.Mock
}

// AnalyzePlan provides a mock function with given fields: p
func (_m *mockIEngine) AnalyzePlan(p Plan) {
	_m.Called(p)
}

// findAnalyzedPlan provides a mock function with given fields: planName, curPlanValue
func (_m *mockIEngine) findAnalyzedPlan(planName string, curPlanValue reflect.Value) analyzedPlan {
	ret := _m.Called(planName, curPlanValue)

	var r0 analyzedPlan
	if rf, ok := ret.Get(0).(func(string, reflect.Value) analyzedPlan); ok {
		r0 = rf(planName, curPlanValue)
	} else {
		r0 = ret.Get(0).(analyzedPlan)
	}

	return r0
}

// getComputer provides a mock function with given fields: componentID
func (_m *mockIEngine) getComputer(componentID string) (registeredComputer, bool) {
	ret := _m.Called(componentID)

	var r0 registeredComputer
	if rf, ok := ret.Get(0).(func(string) registeredComputer); ok {
		r0 = rf(componentID)
	} else {
		r0 = ret.Get(0).(registeredComputer)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(componentID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// getPlan provides a mock function with given fields: planName
func (_m *mockIEngine) getPlan(planName string) (analyzedPlan, bool) {
	ret := _m.Called(planName)

	var r0 analyzedPlan
	if rf, ok := ret.Get(0).(func(string) analyzedPlan); ok {
		r0 = rf(planName)
	} else {
		r0 = ret.Get(0).(analyzedPlan)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(planName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// registerComputer provides a mock function with given fields: mp
func (_m *mockIEngine) registerComputer(mp MetadataProvider) {
	_m.Called(mp)
}

type mockConstructorTestingTnewMockIEngine interface {
	mock.TestingT
	Cleanup(func())
}

// newMockIEngine creates a new instance of mockIEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIEngine(t mockConstructorTestingTnewMockIEngine) *mockIEngine {
	mock := &mockIEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
