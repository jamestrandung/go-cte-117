// Code generated by mockery v2.14.0. DO NOT EDIT.

package cte

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSideEffectComputer is an autogenerated mock type for the SideEffectComputer type
type MockSideEffectComputer struct {
	mock.Mock
}

// Compute provides a mock function with given fields: ctx, p
func (_m *MockSideEffectComputer) Compute(ctx context.Context, p MasterPlan) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MasterPlan) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockSideEffectComputer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSideEffectComputer creates a new instance of MockSideEffectComputer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSideEffectComputer(t mockConstructorTestingTNewMockSideEffectComputer) *MockSideEffectComputer {
	mock := &MockSideEffectComputer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
